<!-- CSV Data Set Config for Tenants -->
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Tenant Data" enabled="true">
        <stringProp name="filename">data/tenant-data.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">tenant_name,auth_token</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle"><?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="YMS Dashboard Stress Test" enabled="true">
      <stringProp name="TestPlan.comments">Multi-tenant stress test for YMS Dashboard Service</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">${__P(base.url,http://localhost:5003)}</stringProp>
          </elementProp>
          <elementProp name="PYTHON_PATH" elementType="Argument">
            <stringProp name="Argument.name">PYTHON_PATH</stringProp>
            <stringProp name="Argument.value">${__P(python.path,python3)}</stringProp>
          </elementProp>
          <elementProp name="FRAMEWORK_PATH" elementType="Argument">
            <stringProp name="Argument.name">FRAMEWORK_PATH</stringProp>
            <stringProp name="Argument.value">${__P(framework.path,../python)}</stringProp>
          </elementProp>
          <elementProp name="TENANT_LIST" elementType="Argument">
            <stringProp name="Argument.name">TENANT_LIST</stringProp>
            <stringProp name="Argument.value">${__P(tenants,tenant-alpha)}</stringProp>
          </elementProp>
          <elementProp name="TEST_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TEST_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(duration,300)}</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <!-- HTTP Request Defaults -->
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">30000</stringProp>
      </ConfigTestElement>
      <hashTree/>
      
      <!-- CSV Data Set Config for Tenants -->
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Tenant Data" enabled="true">
        <stringProp name="filename">data/tenant-data.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">tenant_name,auth_token</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
      </CSVDataSet>
      <hashTree/>
      
      <!-- Thread Group per Tenant -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi-Tenant Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,60)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TEST_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <!-- HTTP Header Manager -->
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">tenant</stringProp>
              <stringProp name="Header.value">${tenant_name}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${auth_token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        
        <!-- Random Controller for Endpoint Selection -->
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Endpoint Controller" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          
          <!-- Yard Availability Endpoint -->
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Yard Availability Transaction" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Yard Availability Payload" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
                vars.put("endpoint", "yard-availability")

                // Build command
                String[] command = [
                    vars.get("PYTHON_PATH"),
                    "-m", "cli",
                    "generate",
                    "--tenant", vars.get("tenant_name"),
                    "--endpoint", "yard-availability",
                    "--count", "1"
                ]

                // Execute Python script
                ProcessBuilder pb = new ProcessBuilder(command)
                pb.directory(new File(vars.get("FRAMEWORK_PATH")))
                Process process = pb.start()

                // Read output
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
                StringBuilder output = new StringBuilder()
                String line
                while ((line = reader.readLine()) != null) {
                    output.append(line)
                }

                process.waitFor()
                vars.put("payload", output.toString())
              </stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Yard Availability" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${payload}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/yms-dashboard-service/api/v1/yard-availability</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Yard Availability RPM Timer" enabled="true">
                <intProp name="calcMode">1</intProp>
                <stringProp name="throughput">${__P(yard.availability.rpm,100)}</stringProp>
              </ConstantThroughputTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          
          <!-- Trailer Overview Endpoint -->
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Trailer Overview Transaction" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Trailer Overview Payload" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
                vars.put("endpoint", "trailer-overview")

                // Build command
                String[] command = [
                    vars.get("PYTHON_PATH"),
                    "-m", "cli",
                    "generate",
                    "--tenant", vars.get("tenant_name"),
                    "--endpoint", "trailer-overview",
                    "--count", "1"
                ]

                // Execute Python script
                ProcessBuilder pb = new ProcessBuilder(command)
                pb.directory(new File(vars.get("FRAMEWORK_PATH")))
                Process process = pb.start()

                // Read output
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
                StringBuilder output = new StringBuilder()
                String line
                while ((line = reader.readLine()) != null) {
                    output.append(line)
                }

                process.waitFor()
                vars.put("payload", output.toString())
              </stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Trailer Overview" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${payload}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/yms-dashboard-service/api/v1/trailer-overview</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Trailer Overview RPM Timer" enabled="true">
                <intProp name="calcMode">1</intProp>
                <stringProp name="throughput">${__P(trailer.overview.rpm,150)}</stringProp>
              </ConstantThroughputTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          
          <!-- Add similar blocks for other 8 endpoints -->
          
        </hashTree>
        
        <!-- Response Validation -->
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Validate Response" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">
            import groovy.json.JsonSlurper
            import groovy.json.JsonBuilder

            // Get response data
            String responseData = prev.getResponseDataAsString()
            int responseCode = prev.getResponseCode() as Integer
            long responseTime = prev.getTime()
            String endpoint = vars.get("endpoint")

            // Basic validation
            if (responseCode != 200) {
                prev.setSuccessful(false)
                log.error("Failed response for ${endpoint}: ${responseCode}")
                return
            }

            // Validate response structure
            try {
                def json = new JsonSlurper().parseText(responseData)
                
                // Endpoint-specific validation
                switch(endpoint) {
                    case "yard-availability":
                        if (!json.docks || !json.parkingSpots) {
                            prev.setSuccessful(false)
                            log.error("Invalid yard availability response structure")
                        }
                        break
                    case "trailer-overview":
                        if (!json.totalTrailersCount || !json.trailerOverviewMetrics) {
                            prev.setSuccessful(false)
                            log.error("Invalid trailer overview response structure")
                        }
                        break
                    // Add cases for other endpoints
                }
            } catch (Exception e) {
                prev.setSuccessful(false)
                log.error("Failed to parse response: " + e.getMessage())
            }

            // Log metrics for monitoring
            log.info("${endpoint} - Response Time: ${responseTime}ms, Status: ${responseCode}")
          </stringProp>
        </JSR223PostProcessor>
        <hashTree/>
        
      </hashTree>
      
      <!-- Listeners -->
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      
    </hashTree>
  </hashTree>
</jmeterTestPlan>